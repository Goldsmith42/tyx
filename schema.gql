
#### Scalars ####
scalar Date
scalar Time
scalar DateTime
scalar JSON
scalar ANY

#### Directives ####
enum RelationType {
    OneToOne,
    OneToMany,
    ManyToOne
}
directive @metadata on OBJECT
directive @input on OBJECT
directive @type on OBJECT
directive @entity on OBJECT
directive @expression on OBJECT
directive @crud(auth: JSON) on FIELD_DEFINITION
directive @query(auth: JSON) on FIELD_DEFINITION
directive @mutation(auth: JSON) on FIELD_DEFINITION
directive @relation(type: RelationType) on FIELD_DEFINITION

#### Metadata Types ####
type VarMetadata @metadata {
  ref: String
  kind: String
  item: VarMetadata
}
type EnumMetadata @metadata {
  kind: String
  name: String
  ref: String
}
type FieldMetadata @metadata {
  ref: String
  kind: String
  name: String
  required: Boolean
  item: VarMetadata
  design: JSON
}
type TypeMetadata @metadata {
  ref: String
  name: String
  kind: String
  fields(
    ref: String,
    kind: String,
    name: String,
    required: Boolean,
    design: JSON
  ): [FieldMetadata]
}
type HttpBindingMetadata @metadata {
  type: String
  path: String
  binder: String
}
type HttpRouteMetadata @metadata {
  target: String
  api: ApiMetadata
  method: MethodMetadata
  route: String
  alias: String
  handler: String
  verb: String
  resource: String
  model: String
  params: [String]
  code: Int
  adapter: String
}
type ApiMetadata @metadata {
  target: String
  name: String
  alias: String
  methods(
    target: String,
    alias: String,
    name: String,
    design: JSON,
    auth: String,
    roles: JSON,
    query: Boolean,
    mutation: Boolean,
    contentType: String,
    source: String
  ): [MethodMetadata]
  routes(
    target: String,
    route: String,
    alias: String,
    handler: String,
    verb: String,
    resource: String,
    model: String,
    code: Int,
    adapter: String
  ): [HttpRouteMetadata]
  events(
    target: String,
    route: String,
    alias: String,
    handler: String,
    source: String,
    resource: String,
    objectFilter: String,
    actionFilter: String,
    adapter: String
  ): [EventRouteMetadata]
  source: String
}
type MethodMetadata @metadata {
  target: String
  api: ApiMetadata
  alias: String
  name: String
  design: JSON
  auth: String
  roles: JSON
  query: Boolean
  mutation: Boolean
  input: VarMetadata
  result: VarMetadata
  contentType: String
  bindings(
    type: String,
    path: String,
    binder: String
  ): [HttpBindingMetadata]
  http(
    target: String,
    route: String,
    alias: String,
    handler: String,
    verb: String,
    resource: String,
    model: String,
    code: Int,
    adapter: String
  ): [HttpRouteMetadata]
  events(
    target: String,
    route: String,
    alias: String,
    handler: String,
    source: String,
    resource: String,
    objectFilter: String,
    actionFilter: String,
    adapter: String
  ): [EventRouteMetadata]
  source: String
}
type EventRouteMetadata @metadata {
  target: String
  api: ApiMetadata
  method: MethodMetadata
  route: String
  alias: String
  handler: String
  source: String
  resource: String
  objectFilter: String
  actionFilter: String
  adapter: String
}
type RelationMetadata @metadata {
  target: String
  entityMetadata: EntityMetadata
  propertyName: String
  relationType: String
  inverseEntityMetadata: EntityMetadata
  inverseRelation: RelationMetadata
  joinColumns(
    target: String,
    name: String,
    propertyName: String,
    type: String,
    precision: Int,
    scale: Int,
    length: String,
    width: Int,
    comment: String,
    isPrimary: Boolean,
    isNullable: Boolean,
    isGenerated: Boolean,
    isCreateDate: Boolean,
    isUpdateDate: Boolean,
    isVersion: Boolean,
    isVirtual: Boolean
  ): [ColumnMetadata]
}
type EntityMetadata @metadata {
  target: String
  name: String
  columns(
    target: String,
    name: String,
    propertyName: String,
    type: String,
    precision: Int,
    scale: Int,
    length: String,
    width: Int,
    comment: String,
    isPrimary: Boolean,
    isNullable: Boolean,
    isGenerated: Boolean,
    isCreateDate: Boolean,
    isUpdateDate: Boolean,
    isVersion: Boolean,
    isVirtual: Boolean
  ): [ColumnMetadata]
  primaryColumns(
    target: String,
    name: String,
    propertyName: String,
    type: String,
    precision: Int,
    scale: Int,
    length: String,
    width: Int,
    comment: String,
    isPrimary: Boolean,
    isNullable: Boolean,
    isGenerated: Boolean,
    isCreateDate: Boolean,
    isUpdateDate: Boolean,
    isVersion: Boolean,
    isVirtual: Boolean
  ): [ColumnMetadata]
  relations(
    target: String,
    propertyName: String,
    relationType: String
  ): [RelationMetadata]
}
type ColumnMetadata @metadata {
  target: String
  entityMetadata: EntityMetadata
  name: String
  propertyName: String
  type: String
  precision: Int
  scale: Int
  length: String
  width: Int
  comment: String
  isPrimary: Boolean
  isNullable: Boolean
  isGenerated: Boolean
  isCreateDate: Boolean
  isUpdateDate: Boolean
  isVersion: Boolean
  isVirtual: Boolean
}
type DatabaseMetadata @metadata {
  target: String
  alias: String
  targets: [String]
  entities(
    target: String,
    name: String
  ): [EntityMetadata]
  columns(
    target: String,
    name: String,
    propertyName: String,
    type: String,
    precision: Int,
    scale: Int,
    length: String,
    width: Int,
    comment: String,
    isPrimary: Boolean,
    isNullable: Boolean,
    isGenerated: Boolean,
    isCreateDate: Boolean,
    isUpdateDate: Boolean,
    isVersion: Boolean,
    isVirtual: Boolean
  ): [ColumnMetadata]
  relations(
    target: String,
    propertyName: String,
    relationType: String
  ): [RelationMetadata]
}
type InjectMetadata @metadata {
  resource: String
  target: String
  index: Int
}
type HandlerMetadata @metadata {
  service: String
  method: String
  target: String
  source: String
}
type ServiceMetadata @metadata {
  target: String
  name: String
  alias: String
  dependencies(
    resource: String,
    target: String,
    index: Int
  ): [InjectMetadata]
  handlers(
    service: String,
    method: String,
    target: String,
    source: String
  ): [HandlerMetadata]
  initializer: HandlerMetadata
  selector: HandlerMetadata
  activator: HandlerMetadata
  releasor: HandlerMetadata
  source: String
}
type ProxyMetadata @metadata {
  target: String
  name: String
  alias: String
  application: String
  functionName: String
  dependencies(
    resource: String,
    target: String,
    index: Int
  ): [InjectMetadata]
  handlers(
    service: String,
    method: String,
    target: String,
    source: String
  ): [HandlerMetadata]
  initializer: HandlerMetadata
  selector: HandlerMetadata
  activator: HandlerMetadata
  releasor: HandlerMetadata
  source: String
}
type DecoratorMetadata @metadata {
  decorator: String
  count: Int
  targets: [String]
}
type DecorationMetadata @metadata {
  decorator: String
  ordinal: Int
  target: String
  propertyKey: String
  index: Int
  args: JSON
}
type MetadataRegistry @metadata {
  RegistryMetadata(
    ref: String,
    name: String,
    kind: String
  ): [TypeMetadata]
  DecoratorMetadata(
    decorator: String,
    count: Int
  ): [DecoratorMetadata]
  DecorationMetadata(
    decorator: String,
    ordinal: Int,
    target: String,
    propertyKey: String,
    index: Int,
    args: JSON
  ): [DecorationMetadata]
  ApiMetadata(
    target: String,
    name: String,
    alias: String,
    source: String
  ): [ApiMetadata]
  ServiceMetadata(
    target: String,
    name: String,
    alias: String,
    source: String
  ): [ServiceMetadata]
  ProxyMetadata(
    target: String,
    name: String,
    alias: String,
    application: String,
    functionName: String,
    source: String
  ): [ProxyMetadata]
  DatabaseMetadata(
    target: String,
    alias: String
  ): [DatabaseMetadata]
  EntityMetadata(
    target: String,
    name: String
  ): [EntityMetadata]
  ColumnMetadata(
    target: String,
    name: String,
    propertyName: String,
    type: String,
    precision: Int,
    scale: Int,
    length: String,
    width: Int,
    comment: String,
    isPrimary: Boolean,
    isNullable: Boolean,
    isGenerated: Boolean,
    isCreateDate: Boolean,
    isUpdateDate: Boolean,
    isVersion: Boolean,
    isVirtual: Boolean
  ): [ColumnMetadata]
  RelationMetadata(
    target: String,
    propertyName: String,
    relationType: String
  ): [RelationMetadata]
  EnumMetadata(
    kind: String,
    name: String,
    ref: String
  ): [EnumMetadata]
  InputMetadata(
    ref: String,
    name: String,
    kind: String
  ): [TypeMetadata]
  TypeMetadata(
    ref: String,
    name: String,
    kind: String
  ): [TypeMetadata]
  MethodMetadata(
    target: String,
    alias: String,
    name: String,
    design: JSON,
    auth: String,
    roles: JSON,
    query: Boolean,
    mutation: Boolean,
    contentType: String,
    source: String
  ): [MethodMetadata]
  ResolverMetadata(
    target: String,
    alias: String,
    name: String,
    design: JSON,
    auth: String,
    roles: JSON,
    query: Boolean,
    mutation: Boolean,
    contentType: String,
    source: String
  ): [MethodMetadata]
  HttpRouteMetadata(
    target: String,
    route: String,
    alias: String,
    handler: String,
    verb: String,
    resource: String,
    model: String,
    code: Int,
    adapter: String
  ): [HttpRouteMetadata]
  EventRouteMetadata(
    target: String,
    route: String,
    alias: String,
    handler: String,
    source: String,
    resource: String,
    objectFilter: String,
    actionFilter: String,
    adapter: String
  ): [EventRouteMetadata]
}

#### Metadata Resolvers ####
type Query {
  Metadata: MetadataRegistry
}
type Mutation {
  ping(input: ANY): ANY
}

#### Enums ####
enum OnOff {
  On,
  Off
}


#### Input: TestInput ####
input TestInput @input {
  data: String
  urgent: Boolean
}
#### Type: TypeA ####
type TypeA @type {
  name: String
}
#### Type: TestResult ####
type TestResult @type {
  res: String
  versions: [String]
  bool: Boolean
  state: OnOff
  sub: TypeA
  subs: [TypeA]
  str: String
  strs: [String]
}
#### API: graphql #####

#### API: HelloWorld #####
extend type Query {
  HelloWorld_test(req: TestInput): TestResult @query(api: "HelloWorld", method: "test", roles: { Public: true, Internal: true, External: false, Remote: true })
  HelloWorld_testLiteral(req: String): [String] @query(api: "HelloWorld", method: "testLiteral", roles: { Public: true, Internal: true, External: false, Remote: true })
  HelloWorld_testVoid: [String] @query(api: "HelloWorld", method: "testVoid", roles: { Public: true, Internal: true, External: false, Remote: true })
  HelloWorld_testEnum(state: OnOff): String @query(api: "HelloWorld", method: "testEnum", roles: { Public: true, Internal: true, External: false, Remote: true })
}
extend type Mutation {
  HelloWorld_operation(req: TestInput): TestResult @mutation(api: "HelloWorld", method: "operation", roles: { Public: true, Internal: true, External: false, Remote: true })
}
